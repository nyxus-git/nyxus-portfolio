// frontend/src/lib/api.ts (or frontend/src/lib/api/index.ts)

// IMPORTANT: Replace with your actual backend URL.
// Ensure your FastAPI backend is running on this address and port.
const API_BASE_URL = "http://localhost:8000/api/v1";

// --- Project API Definitions ---

// Define the Project interface as it comes from your backend
export interface Project {
  id: number;
  title: string;
  description: string;
  tech_stack: string[];
  github_url: string | null; // Backend sends null if not present
  live_url: string | null;   // Backend sends null if not present
  image_path: string | null; // Path in the DB (you might not need this on the frontend)
  image_url: string | null;  // Full URL to the image, generated by backend
}

export async function getProjects(): Promise<Project[]> {
  try {
    const response = await fetch(`${API_BASE_URL}/projects/`);

    if (!response.ok) {
      // Attempt to read error message from backend if available
      const errorData = await response.json().catch(() => ({ message: 'Unknown error' }));
      throw new Error(errorData.detail || errorData.message || `HTTP error! status: ${response.status}`);
    }

    const data: Project[] = await response.json();
    return data;
  } catch (error) {
    console.error("Failed to fetch projects:", error);
    throw error; // Re-throw to be caught by the component's useEffect
  }
}

// You can add other Project-related API functions here later if needed
/*
export async function createProject(projectData: FormData): Promise<Project> {
    const response = await fetch(`${API_BASE_URL}/projects/`, {
        method: 'POST',
        body: projectData, // FormData is used for file uploads and text fields
        // Don't set 'Content-Type': 'multipart/form-data' explicitly; fetch will do it with FormData
    });
    if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: 'Unknown error' }));
        throw new Error(errorData.detail || errorData.message || `HTTP error! status: ${response.status}`);
    }
    return response.json();
}
*/

// --- Contact Form API Definitions ---

// Define the ContactFormData interface to match your Zod schema and backend expectations
export interface ContactFormData {
  name: string;
  email: string;
  subject?: string; // Optional field
  message: string;
}

// Function to send the contact message
export async function sendContactMessage(data: ContactFormData): Promise<{ message: string }> {
  try {
    // Ensure this URL matches your FastAPI backend's contact endpoint
    const response = await fetch(`${API_BASE_URL}/contact/`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });

    if (!response.ok) {
      // Attempt to read error message from backend if available
      const errorData = await response.json().catch(() => ({ message: 'Unknown error' }));
      throw new Error(errorData.detail || errorData.message || `HTTP error! status: ${response.status}`);
    }

    // Assuming your backend returns a success message in JSON, e.g., { "message": "Message sent!" }
    return response.json();
  } catch (error) {
    console.error("Failed to send contact message:", error);
    throw error; // Re-throw to be caught by the component's onSubmit
  }
}